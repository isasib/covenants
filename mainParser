import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;

@SuppressFBWarnings("NM_CLASS_NAMING_CONVENTION")
public class mainParser {

    //specifies which loan agreement you are reading from
    @SuppressFBWarnings("DM_DEFAULT_ENCODING")
    public static String scanPDF(String fileName) {
        //check to see if it is in the right location
        File tmpDir = new File(fileName);
        boolean exists = tmpDir.exists();
        String fileName2 = "";
        if (exists) {
            return fileName;
        }
        while (!exists) {
            Scanner answer = new Scanner(System.in);
            System.out.println("That's not a valid file. Please make sure that the file you are " +
                    "looking for is located in the database folder. Press c to try again with a " +
                    "different file name or any other key to quit.");
            String letter = answer.nextLine();
            letter = letter.toLowerCase();
            char finalAnswer = letter.charAt(0);
            if (finalAnswer == 'c') {
                Scanner input2 = new Scanner(System.in);
                System.out.println("What is the name of the file you would like to read?");
                fileName2 = input2.nextLine();
                fileName2 = "database/" + fileName2;
                File tmpDir2 = new File(fileName2);
                exists = tmpDir2.exists();
            } else {
                return "z";
            }
        }
        return fileName2;
    }

    //______________________________________________________________________________________________________________
    //creates a new file that will be written to
    @SuppressFBWarnings("DM_DEFAULT_ENCODING")
    public static boolean createFile(String newName) {
        try {
            File myObj = new File(newName);
            if (myObj.createNewFile()) {
                System.out.println("File created: " + myObj.getName());
                return true;
            }
        } catch (IOException e) {
            System.out.println("An error occurred.");
            e.printStackTrace();
        }
        System.out.println("File name already exists. Please try again or type q to quit.");
        return false;
    }

    //____________________________________________________________________________________________________________
    //terminates program
    public static void term() {
        System.out.println("You indicated that you wished to " +
                "exit the program. Thank you for using this service. " +
                "We are sad to see you go.");
        System.exit(0);
    }

    //___________________________________________________________________________________________________________
    public static boolean ends(String afterStart) {
        StringBuilder capitalLetters = new StringBuilder();
        String exception1 = "EBITDA";
        String exception2 = "CFADS";
        String exception3 = "COVENANTS";
        String exception4 = "AFFIRMATIVE";
        String exception5 = "NEGATIVE";
        String exception6 = "INFORMATION";
        String exception7 = "UNDERTAKINGS";
        String exception8 = "ACN";
        String exception9 = "ARBN";
        String exception10 = "ABN";
        String exception11 = "FINANCIAL";
        int index = 0;
        char currentIndex = afterStart.charAt(0);
        while (Character.isUpperCase(currentIndex)) {
            capitalLetters.append(currentIndex);
            index++;
            currentIndex = afterStart.charAt(index);
        }
        if (capitalLetters.toString().equals(exception1) ||
                capitalLetters.toString().equals(exception2)
                || capitalLetters.toString().equals(exception3)
                || capitalLetters.toString().equals(exception4)
                || capitalLetters.toString().equals(exception5) ||
                capitalLetters.toString().equals(exception6) ||
                capitalLetters.toString().equals(exception7) ||
                capitalLetters.toString().equals(exception8) ||
                capitalLetters.toString().equals(exception9) ||
                capitalLetters.toString().equals(exception10) ||
                capitalLetters.toString().equals(exception11)) {
            return true;
        } else {
            return false;
        }
    }

    //___________________________________________________________________________________________________________
    public static String templateTop(String borrower, String arranger, String agent, String amount,
                                     String date) {
        String top = "Borrower: " + borrower + "\n";
        top += "Arranger: " + arranger + "\n";
        top += "Agent: " + agent + "\n";
        top += "Amount: $" + amount + "\n";
        top += "Date: " + date + "\n";
        top += "\n";
        top += "\n";
        return top;
    }

    //___________________________________________________________________________________________________________
    public static String extract(StringBuilder total, String type) {
        StringBuilder capitals = new StringBuilder();
        int index = 0;
        char temp = total.charAt(index);
        if (type.equals("capitals")) {
            while (!Character.isUpperCase(temp)) {
                index++;
                temp = total.charAt(index);
            }
            while (Character.isUpperCase(temp) || Character.isSpaceChar(temp) || temp == ',') {
                capitals.append(temp);
                index++;
                temp = total.charAt(index);
            }
            return capitals.toString();
        } else if (type.equals("numbers")) {
            while (temp == '1' || temp == '2' || temp == '3' || temp == '4' || temp == '5' ||
                    temp == '6' || temp == '7' || temp == '8' || temp == '9' || temp == '0' ||
                    temp == ',') {
                capitals.append(temp);
                index++;
                temp = total.charAt(index);
            }
            return capitals.toString();
        } else if (type.equals("date")) {
            String old = "19";
            String newb = "20";
            int dateIndex = total.indexOf(old);
            int dateIndex2 = total.indexOf(newb);
            if (dateIndex == -1 && dateIndex2 == -1) {
                capitals.append("Date of Agreement can not be found");
                return capitals.toString();
            }
            if (dateIndex != -1) {
                capitals.append(total.substring(dateIndex, dateIndex + 4));
                return capitals.toString();
            }
            capitals.append(total.substring(dateIndex2, dateIndex2 + 4));
            return capitals.toString();

        }
        return "";
    }

    //___________________________________________________________________________________________________________
//main
    @SuppressFBWarnings("DM_DEFAULT_ENCODING")
    public static void main(String[] args) {
        //local variables
        int i = 0;
        int j = 0;
        int countCapitals = 0;
        StringBuilder fileContents = new StringBuilder();
        StringBuilder copy1 = new StringBuilder();

        //scanPDF
        Scanner input = new Scanner(System.in);
        System.out.println("What is the name of the file you would like to read?");
        String fileName = input.nextLine();
        fileName = "database/" + fileName;
        String a = scanPDF(fileName);
        if (a.equals("z")) {
            term();
        } else {
            fileName = a;
        }

        // Creates File
        System.out.println("What would you like the file that will be created during the " +
                "duration of this program to be called? Please remember to include .txt at " +
                "the end.");
        String newName = input.nextLine();
        boolean b = createFile(newName);
        while (!b) {
            String backup = input.nextLine();
            String backup2 = backup.toLowerCase();
            char q = backup2.charAt(0);
            if (q == 'q') {
                term();
            }
            newName = backup;
            b = createFile(backup);
        }
        try {
            FileReader file_open = new FileReader(fileName);
            FileWriter myWriter = new FileWriter(newName);
            while ((i = file_open.read()) != -1) {
                fileContents.append((char) i);
            }

            //finds borrower
            String b1 = "borrower";
            String b2 = "Borrower";
            String b3 = "BORROWER";
            String b4 = "for";
            String borrower = "";
            int indexb = fileContents.indexOf(b1);
            if (indexb != -1 && indexb < 250) {
                copy1.append(fileContents.substring(indexb));
                borrower = extract(copy1, "capitals");
                copy1.delete(0, copy1.length());
            } else if (fileContents.indexOf(b2) != -1 && fileContents.indexOf(b2) < 250) {
                indexb = fileContents.indexOf(b2);
                copy1.append(fileContents.substring(indexb));
                borrower = extract(copy1, "capitals");
                copy1.delete(0, copy1.length());
            } else if (fileContents.indexOf(b3) != -1 && fileContents.indexOf(b3) < 250) {
                indexb = fileContents.indexOf(b3);
                copy1.append(fileContents.substring(indexb));
                borrower = extract(copy1, "capitals");
                copy1.delete(0, copy1.length());
            } else if (fileContents.indexOf(b4) != -1 && fileContents.indexOf(b4) < 250) {
                indexb = fileContents.indexOf(b4);
                copy1.append(fileContents.substring(indexb));
                borrower = extract(copy1, "capitals");
                copy1.delete(0, copy1.length());
            } else {
                borrower = "No data on Borrower is available.";
            }

            //finds arranger
            String a1 = "ARRANGER";
            String a2 = "Arranger";
            String a3 = "arranged";
            String arranger = "";
            int indexa = fileContents.indexOf(a1);
            if (indexa != -1 && indexa < 1000) {
                copy1.append(fileContents.substring(indexa));
                arranger = extract(copy1, "capitals");
                copy1.delete(0, copy1.length());
            } else if (fileContents.indexOf(a2) != -1 && fileContents.indexOf(a2) < 1000) {
                indexa = fileContents.indexOf(a2);
                copy1.append(fileContents.substring(indexa));
                arranger = extract(copy1, "capitals");
                copy1.delete(0, copy1.length());
            } else if (fileContents.indexOf(a3) != -1 && fileContents.indexOf(a3) < 1000) {
                indexa = fileContents.indexOf(a3);
                copy1.append(fileContents.substring(indexa));
                arranger = extract(copy1, "capitals");
                copy1.delete(0, copy1.length());
            } else {
                arranger = "No data on arranger is available";
            }

            //finds agent
            String ag1 = "AGENT";
            String ag2 = "with";
            String ag3 = "Agent";
            String agent = "";
            int indexag = fileContents.indexOf(ag1);
            if (indexag != -1 && indexag < 1000) {
                copy1.append(fileContents.substring(indexag));
                agent = extract(copy1, "capitals");
                copy1.delete(0, copy1.length());
            } else if (fileContents.indexOf(ag2) != -1 && fileContents.indexOf(ag2) < 1000) {
                indexag = fileContents.indexOf(ag2);
                copy1.append(fileContents.substring(indexag));
                agent = extract(copy1, "capitals");
                copy1.delete(0, copy1.length());
            } else if (fileContents.indexOf(ag3) != -1 && fileContents.indexOf(ag3) < 1000) {
                indexag = fileContents.indexOf(ag3);
                copy1.append(fileContents.substring(indexag));
                agent = extract(copy1, "capitals");
                copy1.delete(0, copy1.length());
            } else {
                agent = "No data on agent is available";
            }

            //finds amount
            int mi = fileContents.indexOf("$");
            copy1.append(fileContents.substring(mi + 1));
            String amount = extract(copy1, "numbers");
            copy1.delete(0, copy1.length());

            //finds date
            copy1.append(fileContents.substring(0, 1000));
            String date = extract(copy1, "date");
            copy1.delete(0, copy1.length());

            //finds beginning of covenant
            String potentialRR = "INFORMATION UNDERTAKINGS";
            int istherr = fileContents.indexOf(potentialRR);
            if (istherr != -1) {
                fileContents.delete(0, istherr);
            } else {
                String abc = "COVENANT";
                int indexOfAbc = fileContents.indexOf(abc);
                fileContents.delete(0, indexOfAbc);
            }

            //finds end of covenant
            for (j = 0; j < fileContents.length(); j++) {
                char current = fileContents.charAt(j);
                if (Character.isUpperCase(current)) {
                    countCapitals++;
                } else {
                    countCapitals = 0;
                }
                if (countCapitals == 2) {
                    String newbie = fileContents.substring(j - 1);
                    boolean result = ends(newbie);
                    if (!result) {
                        fileContents.delete(j - 1, fileContents.length() - 1);
                    }
                }
            }

            //create template
            String tt = templateTop(borrower, arranger, agent, amount, date);
            fileContents.insert(0, tt);

            myWriter.write(fileContents.toString());
            myWriter.close();
            System.out.println("Successfully wrote to the file.");
        } catch (IOException e) {
            System.out.println("An error occurred.");
            e.printStackTrace();
        }

    }
}

