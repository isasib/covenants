import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;

public class copycat {
    @SuppressFBWarnings("DM_DEFAULT_ENCODING")
    public static String scanPDF(String fileName) {
        //check to see if it is in the right location
        File tmpDir = new File(fileName);
        boolean exists = tmpDir.exists();
        String fileName2 = "";
        if (exists) {
            return fileName;
        }
        while (!exists) {
            Scanner answer = new Scanner(System.in);
            System.out.println("That's not a valid file. Please make sure that the file you are " +
                    "looking for is located in the database folder. Press c to try again with a " +
                    "different file name or any other key to quit.");
            String letter = answer.nextLine();
            letter = letter.toLowerCase();
            char finalAnswer = letter.charAt(0);
            if (finalAnswer == 'c') {
                Scanner input2 = new Scanner(System.in);
                System.out.println("What is the name of the file you would like to read?");
                fileName2 = input2.nextLine();
                fileName2 = "database/" + fileName2;
                File tmpDir2 = new File(fileName2);
                exists = tmpDir2.exists();
            } else {
                return "z";
            }
        }
        return fileName2;
    }

    //______________________________________________________________________________________________________________
    //creates a new file that will be written to
    @SuppressFBWarnings("DM_DEFAULT_ENCODING")
    public static boolean createFile(String newName) {
        try {
            File myObj = new File(newName);
            if (myObj.createNewFile()) {
                System.out.println("File created: " + myObj.getName());
                return true;
            }
        } catch (IOException e) {
            System.out.println("An error occurred.");
            e.printStackTrace();
        }
        System.out.println("File name already exists. Please try again or type q to quit.");
        return false;
    }

    //____________________________________________________________________________________________________________
    //terminates program
    public static void term() {
        System.out.println("You indicated that you wished to " +
                "exit the program. Thank you for using this service. " +
                "We are sad to see you go.");
        System.exit(0);
    }

    //___________________________________________________________________________________________________________
    public static boolean ends(String afterStart) {
        StringBuilder capitalLetters = new StringBuilder();
        String exception1 = "EBITDA";
        String exception2 = "CFADS";
        String exception3 = "COVENANTS";
        String exception4 = "AFFIRMATIVE";
        String exception5 = "NEGATIVE";
        String exception6 = "INFORMATION";
        String exception7 = "UNDERTAKINGS";
        String exception8 = "ACN";
        String exception9 = "ARBN";
        String exception10 = "ABN";
        String exception11 = "FINANCIAL";
        String exception12 = "EXHIBIT";
        String exception13 = "IV";
        String exception14 = "V";
        String exception15 = "NT";
        String exception16 = "ROC";
        String exception17 = "ASE";
        String exception18 = "III";
        String exception19 = "GAAP";
        String exception20 = "VI";
        String exception21 = "VII";
        String exception22 = "VIII";
        String exception23 = "IX";
        String exception24 = "SEC";
        String exception25 = "MLPF";
        String exception26 = "PUBLIC";
        String exception27 = "ERISA";
        String exception28 = "REIT";
        String exception29 = "ARTICLE";
        String exception30 = "FRB";
        String exception31 = "FCPA";
        String exception32 = "CFR";

        int index = 0;
        char currentIndex = afterStart.charAt(0);
        while (Character.isUpperCase(currentIndex)) {
            capitalLetters.append(currentIndex);
            index++;
            currentIndex = afterStart.charAt(index);
        }
        if (capitalLetters.toString().equals(exception1) ||
                capitalLetters.toString().equals(exception2)
                || capitalLetters.toString().equals(exception3)
                || capitalLetters.toString().equals(exception4)
                || capitalLetters.toString().equals(exception5) ||
                capitalLetters.toString().equals(exception6) ||
                capitalLetters.toString().equals(exception7) ||
                capitalLetters.toString().equals(exception8) ||
                capitalLetters.toString().equals(exception9) ||
                capitalLetters.toString().equals(exception10) ||
                capitalLetters.toString().equals(exception11) ||
                capitalLetters.toString().equals(exception12) ||
                capitalLetters.toString().equals(exception13) ||
                capitalLetters.toString().equals(exception14) ||
                capitalLetters.toString().equals(exception15) ||
                capitalLetters.toString().equals(exception16) ||
                capitalLetters.toString().equals(exception17) ||
                capitalLetters.toString().equals(exception18) ||
                capitalLetters.toString().equals(exception19) ||
                capitalLetters.toString().equals(exception20) ||
                capitalLetters.toString().equals(exception21) ||
                capitalLetters.toString().equals(exception22) ||
                capitalLetters.toString().equals(exception23) ||
                capitalLetters.toString().equals(exception24) ||
                capitalLetters.toString().equals(exception25) ||
                capitalLetters.toString().equals(exception26) ||
                capitalLetters.toString().equals(exception27) ||
                capitalLetters.toString().equals(exception28) ||
                capitalLetters.toString().equals(exception29) ||
                capitalLetters.toString().equals(exception30) ||
                capitalLetters.toString().equals(exception31) ||
                capitalLetters.toString().equals(exception32)) {
            return true;
        } else {
            return false;
        }
    }

    //___________________________________________________________________________________________________________
    //creates top of the template with basic information
    public static String templateTop(String borrower, String arranger, String agent, String amount,
                                     String date) {
        String top = "Borrower: " + borrower + "\n";
        top += "Arranger: " + arranger + "\n";
        top += "Agent: " + agent + "\n";
        top += "Amount: " + amount + "\n";
        top += "Date: " + date + "\n";
        top += "\n";
        return top;
    }

    //___________________________________________________________________________________________________________
    // creates reporting requirements section of the template
    public static String templateRR(StringBuilder covenants) {
        StringBuilder copycat = new StringBuilder();
        StringBuilder secondInstance = new StringBuilder();
        int i;
        int j;
        String mid = "REPORTING REQUIREMENTS: ";

        //find start of financial statement requirements
        String fs = "Financial statements";
        int lengthfs = fs.length();
        int indexfs = covenants.indexOf(fs);
        int indexp = 0;
        if (indexfs != -1) {
            //find end of reporting requirements
            secondInstance.append(covenants.substring(indexfs + lengthfs, covenants.length()));
            String period = ".";
            indexp = secondInstance.indexOf(period);
            mid += (secondInstance.substring(0, indexp));
            copycat.append(covenants.substring(0, indexfs));
        } else {
            mid += "No financial reporting requirements were found";
            copycat.append(covenants.substring(0, covenants.length()));
        }

        //find certification requirements
        copycat.append(covenants.substring(indexp, covenants.length()));
        String certy = "Certificate";
        String certificates = "";
        int indexc = copycat.indexOf(certy);
        int start;
        int end;
        boolean certypart = false;
        if (indexc != -1) {
            String inbetween = copycat.substring(indexc, indexc + 1750);
            String keyword1 = "shall be certified by";
            int indexk1 = inbetween.indexOf(keyword1);
            if (indexk1 != -1) {
                certypart = true;
                start = 0;
                end = 0;
                for (i = indexk1; i > 0; i--) {
                    char current = inbetween.charAt(i);
                    if (current == '.') {
                        if (!Character.isDigit(inbetween.charAt(i + 1))) {
                            start = i;
                            break;
                        }
                    }
                }
                for (j = indexk1; j < inbetween.length(); j++) {
                    char current = inbetween.charAt(j);
                    if (current == '.') {
                        end = j;
                        break;
                    }
                }
                certificates = inbetween.substring(start + 1, end + 1);
                int k;
                for (k = 0; k < certificates.length(); k++) {
                    char ct = certificates.charAt(k);
                    if (Character.isLetter(ct) && ct != 'b') {
                        break;
                    }
                }
                int l = certificates.length();
                certificates = certificates.substring(k, l);
            }
        }
        if (certypart) {
            mid += "\n";
            mid += "\n";
            mid += certificates;
        } else {
            mid += "\n";
            mid += "\n";
            mid += "No certificate reporting requirements were found";
        }

        //find accounting practice requirements
        String audit = "audited by";
        String auditpart = "";
        int indexaudit = copycat.indexOf(audit);
        boolean ap = false;
        int start1 = 0;
        int end1 = 1;
        int m;
        int n;
        if (indexaudit != -1) {
            ap = true;
            for (m = indexaudit; m > 0; m--) {
                char current = copycat.charAt(m);
                if (current == '.') {
                    if (!Character.isDigit(copycat.charAt(m + 1))) {
                        start1 = m;
                        break;
                    }
                }
            }
            for (n = indexaudit; n < copycat.length(); n++) {
                char current = copycat.charAt(n);
                if (current == '.') {
                    end1 = n;
                    break;
                }
            }
            auditpart = copycat.substring(start1, end1);
            int q;
            for (q = 0; q < auditpart.length(); q++) {
                char ct = auditpart.charAt(q);
                if (Character.isLetter(ct)) {
                    break;
                }
            }
            int ll = auditpart.length();
            auditpart = auditpart.substring(q, ll);
        }

        if (ap) {
            mid += "\n";
            mid += "\n";
            mid += auditpart;
        } else {
            mid += "\n";
            mid += "\n";
            mid += "No requirements for accounting practices were found";
        }

        //find valuations of assets
        String valuations = "valuations";
        String valuepart = "";
        int indexv = copycat.indexOf(valuations);
        boolean v = false;
        int start2 = 0;
        int end2 = 1;
        int rv;
        int sv;
        if (indexv != -1) {
            v = true;
            for (rv = indexv; rv > 0; rv--) {
                char current = copycat.charAt(rv);
                if (current == '.') {
                    if (!Character.isDigit(copycat.charAt(rv + 1))) {
                        start2 = rv;
                        break;
                    }
                }
            }
            for (sv = indexv; sv < copycat.length(); sv++) {
                char current = copycat.charAt(sv);
                if (current == '.') {
                    end2 = sv;
                    break;
                }
            }
            valuepart = copycat.substring(start2, end2);
            int qv;
            for (qv = 0; qv < valuepart.length(); qv++) {
                char ct = valuepart.charAt(qv);
                if (Character.isLetter(ct)) {
                    break;
                }
            }
            int ll = valuepart.length();
            valuepart = valuepart.substring(qv, ll);
        }
        if (v) {
            mid += "\n";
            mid += "\n";
            mid += valuepart;
            mid += "\n";
            mid += "\n";
        } else {
            mid += "\n";
            mid += "\n";
            mid += "No requirements concerning valuations were found";
            mid += "\n";
            mid += "\n";
        }
        return mid;
    }

    //___________________________________________________________________________________________________________
    // creates financial covenants section of the template
    public static String bottomTemplate(StringBuilder bottom) {
        String output = "FINANCIAL COVENANTS: ";
        output += "\n";
        int h = 0;
        int i = 0;
        int j = 0;
        String fcStart = "Financial Covenants";
        int indexFCStart = bottom.indexOf(fcStart);
        if (indexFCStart != -1) {
            int fcLength = fcStart.length();
            int start = indexFCStart + fcLength;
            String snippet = bottom.substring(start, bottom.length());
            String nlr = "Net Leverage Ratio";
            int indexStat1 = snippet.indexOf(nlr);
            if (indexStat1 != -1) {
                for (h = indexStat1; h < snippet.length() - 1; h++) {
                    char current = snippet.charAt(h);
                    char next = snippet.charAt(h + 1);
                    if (current == '.' && !Character.isDigit(next)) {
                        break;
                    }
                }
                output += snippet.substring(indexStat1, h);
                output += "\n";
            } else {
                output += "No requirements for Net Leverage Ratio found";
                output += "\n";
            }
            String dscr = "Debt Service Cover Ratio";
            int indexStat2 = snippet.indexOf(dscr);
            if (indexStat2 != -1) {
                for (i = indexStat2; i < snippet.length() - 1; i++) {
                    char current = snippet.charAt(i);
                    char next = snippet.charAt(i + 1);
                    if (current == '.' && !Character.isDigit(next)) {
                        break;
                    }
                }
                output += snippet.substring(indexStat2, i);
                output += "\n";
            } else {
                output += "No requirements for Debt Service Coverage Ratio found";
                output += "\n";
            }
            String gtt = "Guarantor Threshold Test";
            int indexStat3 = snippet.indexOf(gtt);
            if (indexStat3 != -1) {
                for (j = indexStat3; j < snippet.length() - 1; j++) {
                    char current = snippet.charAt(j);
                    char next = snippet.charAt(j + 1);
                    if (current == '.' && !Character.isDigit(next)) {
                        break;
                    }
                }
                output += snippet.substring(indexStat3, j);
                output += "\n";
            } else {
                output += "No requirements for Guarantor Threshold Test found";
                output += "\n";
            }
            String icr = "Interest Coverage Ratio";
            int indexStat4 = snippet.indexOf(icr);
            if (indexStat4 != -1) {
                for (h = indexStat4; h < snippet.length() - 1; h++) {
                    char current = snippet.charAt(h);
                    char next = snippet.charAt(h + 1);
                    if (current == '.' && !Character.isDigit(next)) {
                        break;
                    }
                }
                output += snippet.substring(indexStat4, h);
                output += "\n";
            } else {
                output += "No requirements for Interest Coverage Ratio found";
                output += "\n";
            }
            String lr = "Leverage Ratio";
            int indexStat5 = snippet.indexOf(lr);
            if (indexStat5 != -1) {
                for (h = indexStat5; h < snippet.length() - 1; h++) {
                    char current = snippet.charAt(h);
                    char next = snippet.charAt(h + 1);
                    if (current == '.' && !Character.isDigit(next)) {
                        break;
                    }
                }
                output += snippet.substring(indexStat5, h);
                output += "\n";
            } else {
                output += "No requirements for Leverage Ratio found";
                output += "\n";
            }
            String fmmnw = "Fair Market Minimum Net Worth";
            int indexStat6 = snippet.indexOf(fmmnw);
            int length6 = fmmnw.length() + 1;
            if (indexStat6 != -1) {
                for (h = indexStat6 + length6; h < snippet.length() - 1; h++) {
                    char current = snippet.charAt(h);
                    char next = snippet.charAt(h + 1);
                    if (current == '.' && !Character.isDigit(next)) {
                        break;
                    }
                }
                output += snippet.substring(indexStat6, h);
                output += "\n";
            } else {
                output += "No requirements for Fair Market Minimum Net Worth found";
                output += "\n";
            }
            String tltta = "Total Liabilities to Total Adjusted Asset Value";
            int indexStat7 = snippet.indexOf(tltta);
            int length7 = tltta.length() + 1;
            if (indexStat7 != -1) {
                for (h = indexStat7 + length7; h < snippet.length() - 1; h++) {
                    char current = snippet.charAt(h);
                    char next = snippet.charAt(h + 1);
                    if (current == '.' && !Character.isDigit(next)) {
                        break;
                    }
                }
                output += snippet.substring(indexStat7, h);
                output += "\n";
            } else {
                output += "No requirements for Total Liability to Total Adjusted Asset Value found";
                output += "\n";
            }
            String sitta = "Secured Indebtedness to Total Adjusted Asset Value";
            int indexStat8 = snippet.indexOf(sitta);
            int length8 = sitta.length() + 1;
            if (indexStat8 != -1) {
                for (h = indexStat8 + length8; h < snippet.length() - 1; h++) {
                    char current = snippet.charAt(h);
                    char next = snippet.charAt(h + 1);
                    if (current == '.' && !Character.isDigit(next)) {
                        break;
                    }
                }
                output += snippet.substring(indexStat8, h);
                output += "\n";
            } else {
                output += "No requirements for Secured Indebtedness to Total Adjusted Asset Value found";
                output += "\n";
            }
            String etfc = "EBITDA to Fixed Charges";
            int indexStat9 = snippet.indexOf(etfc);
            int length9 = etfc.length() + 1;
            if (indexStat9 != -1) {
                for (h = indexStat9 + length9; h < snippet.length() - 1; h++) {
                    char current = snippet.charAt(h);
                    char next = snippet.charAt(h + 1);
                    if (current == '.' && !Character.isDigit(next)) {
                        break;
                    }
                }
                output += snippet.substring(indexStat9, h);
                output += "\n";
            } else {
                output += "No requirements for EBITDA to Fixed Charges found";
                output += "\n";
            }
            String tui = "Total Unsecured Indebtedness";
            int indexStat10 = snippet.indexOf(tui);
            int length10 = tui.length() + 1;
            if (indexStat10 != -1) {
                for (h = indexStat10 + length10; h < snippet.length() - 1; h++) {
                    char current = snippet.charAt(h);
                    char next = snippet.charAt(h + 1);
                    if (current == '.' && !Character.isDigit(next)) {
                        break;
                    }
                }
                output += snippet.substring(indexStat10, h);
                output += "\n";
            } else {
                output += "No requirements for Total Unsecured Indebtedness found";
                output += "\n";
            }
            String uicr = "Unencumbered Interest Coverage Ratio";
            int indexStat11 = snippet.indexOf(uicr);
            int length11 = uicr.length() + 1;
            if (indexStat11 != -1) {
                for (h = indexStat11 + length11; h < snippet.length() - 1; h++) {
                    char current = snippet.charAt(h);
                    char next = snippet.charAt(h + 1);
                    if (current == '.' && !Character.isDigit(next)) {
                        break;
                    }
                }
                output += snippet.substring(indexStat11, h);
                output += "\n";
            } else {
                output += "No requirements for Unencumbered Interest Coverage Ratios found";
                output += "\n";
            }
            String dad = "Dividends and Distributions";
            int indexStat12 = snippet.indexOf(dad);
            int length12 = dad.length() + 1;
            if (indexStat12 != -1) {
                for (h = indexStat12 + length12; h < snippet.length() - 1; h++) {
                    char current = snippet.charAt(h);
                    char next = snippet.charAt(h + 1);
                    if (current == '.' && !Character.isDigit(next)) {
                        break;
                    }
                }
                output += snippet.substring(indexStat12, h);
                output += "\n";
            } else {
                output += "No requirements for Dividends and Distributions found";
                output += "\n";
            }
            String mtav = "Mortgages to Total Adjusted Asset Value";
            int indexStat13 = snippet.indexOf(mtav);
            int length13 = mtav.length() + 1;
            if (indexStat13 != -1) {
                for (h = indexStat13 + length13; h < snippet.length() - 1; h++) {
                    char current = snippet.charAt(h);
                    char next = snippet.charAt(h + 1);
                    if (current == '.' && !Character.isDigit(next)) {
                        break;
                    }
                }
                output += snippet.substring(indexStat13, h);
                output += "\n";
            } else {
                output += "No requirements for Mortgages to Total Adjusted Asset Value found";
                output += "\n";
            }
        } else {
            String ratios = "maintain the following financial ratios";
            int indexratio = bottom.indexOf(ratios);
            int m;
            int n;
            if (indexratio != -1) {
                String catcl = "Current Assets to Current Liabilities";
                int indexcatcl = bottom.indexOf(catcl);
                if (indexcatcl != -1) {
                    for (m = indexcatcl - 1; m > 0; m--) {
                        char current = bottom.charAt(m);
                        if (Character.isUpperCase(current)) {
                            break;
                        }
                    }
                    for (n = indexcatcl; n < bottom.length(); n++) {
                        char current = bottom.charAt(n);
                        if (current == '.') {
                            break;
                        }
                    }
                    output += bottom.substring(m, n);
                    output += "\n";
                }
                String tltnw = "Total Liabilities to Tangible Net Worth";
                int indextlnw = bottom.indexOf(tltnw);
                if (indextlnw != -1) {
                    for (m = indextlnw - 1; m > 0; m--) {
                        char current = bottom.charAt(m);
                        if (Character.isUpperCase(current)) {
                            break;
                        }
                    }
                    for (n = indextlnw; n < bottom.length(); n++) {
                        char current = bottom.charAt(n);
                        if (current == '.') {
                            break;
                        }
                    }
                    output += bottom.substring(m, n);
                    output += "\n";
                }
                String icr = "Interest Coverage Ratio";
                int indexicr = bottom.indexOf(icr);
                if (indexicr != -1) {
                    for (m = indexicr - 1; m > 0; m--) {
                        char current = bottom.charAt(m);
                        if (Character.isUpperCase(current)) {
                            break;
                        }
                    }
                    for (n = indexicr; n < bottom.length(); n++) {
                        char current = bottom.charAt(n);
                        if (current == '.') {
                            break;
                        }
                    }
                    output += bottom.substring(m, n);
                    output += "\n";
                }
                String tnw = "Its Tangible Net Worth";
                int indextnw = bottom.indexOf(tnw);
                if (indextnw != -1) {
                    for (n = indextnw; n < bottom.length(); n++) {
                        char current = bottom.charAt(n);
                        if (current == '.') {
                            break;
                        }
                    }
                    output += bottom.substring(indextnw, n);
                    output += "\n";
                }
            }
        }
        output += "\n";
        return output;
    }

    //___________________________________________________________________________________________________________
    //pulls out reporting requirements from within the covenant
    public static String rrInCovenant(StringBuilder copy) {
        StringBuilder c = new StringBuilder();
        c.append(copy.substring(0, copy.length()));
        String output = "REPORTING REQUIREMENTS: ";
        output += "\n";
        String case1 = "days after the end of each";
        int j;
        int end;
        int caseIndex = c.indexOf(case1);
        if (caseIndex == -1) {
            output += "No reporting requirements found";
            output += "\n";
        }
        while (caseIndex != -1) {
            for (j = caseIndex; j > 0; j--) {
                char current = c.charAt(j);
                if (Character.isUpperCase(current)) {
                    break;
                }
            }
            for (end = caseIndex; end < c.length(); end++) {
                char current = c.charAt(end);
                if (current == '.') {
                    break;
                }
            }
            output += c.substring(j, end);
            output += "\n";
            c.delete(0, end + 1);
            caseIndex = c.indexOf(case1);
        }
        output += "\n";
        return output;
    }

    //___________________________________________________________________________________________________________
    public static String extract(StringBuilder total, String type) {
        StringBuilder capitals = new StringBuilder();
        int index = 0;
        char temp = total.charAt(index);
        if (type.equals("capitals")) {
            while (!Character.isUpperCase(temp)) {
                index++;
                temp = total.charAt(index);
            }
            while (Character.isUpperCase(temp) || Character.isSpaceChar(temp) || temp == ',' || temp == '.') {
                capitals.append(temp);
                index++;
                temp = total.charAt(index);
            }
            return capitals.toString();
        } else if (type.equals("numbers")) {
            while (temp == '1' || temp == '2' || temp == '3' || temp == '4' || temp == '5' ||
                    temp == '6' || temp == '7' || temp == '8' || temp == '9' || temp == '0' ||
                    temp == ',') {
                capitals.append(temp);
                index++;
                temp = total.charAt(index);
            }
            return capitals.toString();
        } else if (type.equals("date")) {
            String old = "19";
            String newb = "20";
            int dateIndex = total.indexOf(old);
            int dateIndex2 = total.indexOf(newb);
            if (dateIndex == -1 && dateIndex2 == -1) {
                capitals.append("Date of Agreement can not be found");
                return capitals.toString();
            }
            if (dateIndex != -1) {
                capitals.append(total.substring(dateIndex, dateIndex + 4));
                return capitals.toString();
            }
            capitals.append(total.substring(dateIndex2, dateIndex2 + 4));
            return capitals.toString();

        }
        return "";
    }

    //___________________________________________________________________________________________________________
    // goes to end of covenant
    public static String goToEnd(StringBuilder agreement, String section) {
        int index = agreement.indexOf(section);
        int length = section.length();
        index = index + length;
        agreement.delete(0, index);
        String end = "";
        String f2 = "";
        int counter = 0;
        int j;
        for (j = 1; j < agreement.length(); j++) {
            f2 = "";
            char before = agreement.charAt(j - 1);
            char current = agreement.charAt(j);
            if (Character.isUpperCase(current)) {
                counter++;
            } else {
                counter = 0;
            }
            f2 = String.valueOf(before);
            f2 += String.valueOf(current);
            if (counter == 2 && !f2.equals("TA") && !f2.equals("SE") && !f2.equals("OF") && !f2.equals("CO")) {
                agreement.delete(0, j - 1);
                end = extract(agreement, "capitals");
                break;
            }
        }
        return end;
    }

    //___________________________________________________________________________________________________________
    @SuppressFBWarnings({"DM_DEFAULT_ENCODING", "DM_DEFAULT_ENCODING"})
    public static void main(String[] args) {
        //local variables
        int i = 0;
        int j = 0;
        int countCapitals = 0;
        StringBuilder fileContents = new StringBuilder();
        StringBuilder copy1 = new StringBuilder();
        StringBuilder rr = new StringBuilder();
        StringBuilder covenants = new StringBuilder();
        StringBuilder toc = new StringBuilder();
        //scanPDF
        Scanner input = new Scanner(System.in);
        System.out.println("What is the name of the file you would like to read?");
        String fileName = input.nextLine();
        fileName = "database/" + fileName;
        String a = scanPDF(fileName);
        if (a.equals("z")) {
            term();
        } else {
            fileName = a;
        }

        // Creates File
        System.out.println("What would you like the file that will be created during the " +
                "duration of this program to be called? Please remember to include .txt at " +
                "the end.");
        String newName = input.nextLine();
        boolean b = createFile(newName);
        while (!b) {
            String backup = input.nextLine();
            String backup2 = backup.toLowerCase();
            char q = backup2.charAt(0);
            if (q == 'q') {
                term();
            }
            newName = backup;
            b = createFile(backup);
        }
        try {
            FileReader file_open = new FileReader(fileName);
            FileWriter myWriter = new FileWriter(newName);
            while ((i = file_open.read()) != -1) {
                fileContents.append((char) i);
            }

            //finds borrower
            String b1 = "borrower";
            String b2 = "Borrower";
            String b3 = "BORROWER";
            String b4 = "for";
            String b5 = "among";
            String borrower = "";
            int indexb1 = fileContents.indexOf(b1);
            if (indexb1 == -1) {
                indexb1 = 251;
            }
            int indexb2 = fileContents.indexOf(b2);
            if (indexb2 == -1) {
                indexb2 = 251;
            }
            int indexb3 = fileContents.indexOf(b3);
            if (indexb3 == -1) {
                indexb3 = 251;
            }
            int indexb4 = fileContents.indexOf(b4);
            if (indexb4 == -1) {
                indexb4 = 251;
            }
            int indexb5 = fileContents.indexOf(b5);
            if (indexb5 == -1) {
                indexb5 = 251;
            }
            if (indexb1 < indexb2 && indexb1 < indexb3 && indexb1 < indexb4 && indexb1 < 250 && indexb1 < indexb5) {
                int length1 = b1.length();
                copy1.append(fileContents.substring(indexb1 + length1));
                borrower = extract(copy1, "capitals");
                copy1.delete(0, copy1.length());
            } else if (indexb2 < indexb1 && indexb2 < indexb3 && indexb2 < indexb4 && indexb2 < 250 && indexb2 < indexb5) {
                int length2 = b2.length();
                copy1.append(fileContents.substring(indexb2 + length2));
                borrower = extract(copy1, "capitals");
                copy1.delete(0, copy1.length());
            } else if (indexb3 < indexb1 && indexb3 < indexb2 && indexb3 < indexb4 && indexb3 < 250 && indexb3 < indexb5) {
                int length3 = b3.length();
                copy1.append(fileContents.substring(indexb3 + length3));
                borrower = extract(copy1, "capitals");
                copy1.delete(0, copy1.length());
            } else if (indexb4 < indexb1 && indexb4 < indexb2 && indexb4 < indexb3 && indexb4 < 250 && indexb4 < indexb5) {
                int length4 = b4.length();
                copy1.append(fileContents.substring(indexb4 + length4));
                borrower = extract(copy1, "capitals");
                copy1.delete(0, copy1.length());
            } else if (indexb5 < indexb1 && indexb5 < indexb2 && indexb5 < indexb3 && indexb5 < 250 && indexb5 < indexb4) {
                int length5 = b5.length();
                copy1.append(fileContents.substring(indexb5 + length5));
                borrower = extract(copy1, "capitals");
                copy1.delete(0, copy1.length());
            } else {
                borrower = "No data on Borrower is available.";
            }

            //finds arranger
            String a1 = "ARRANGER";
            String a2 = "Arranger";
            String a3 = "arranged";
            String a4 = "as Lead Arranger";
            String arranger = "";
            int indexa1 = fileContents.indexOf(a1);
            int indexa2 = fileContents.indexOf(a2);
            int indexa3 = fileContents.indexOf(a3);
            int indexa4 = fileContents.indexOf(a4);
            if (indexa1 == -1) {
                indexa1 = 1001;
            }
            if (indexa2 == -1) {
                indexa2 = 1001;
            }
            if (indexa3 == -1) {
                indexa3 = 1001;
            }
            if (indexa4 == -1) {
                indexa4 = 1001;
            }
            if (indexa1 < indexa2 && indexa1 < indexa3 && indexa1 < 1000 && indexa1 < indexa4) {
                int length1 = a1.length();
                copy1.append(fileContents.substring(indexa1 + length1));
                arranger = extract(copy1, "capitals");
                copy1.delete(0, copy1.length());
            } else if (indexa2 < indexa1 && indexa2 < indexa3 && indexa2 < 1000 && indexa2 < indexa4) {
                int length2 = a2.length();
                copy1.append(fileContents.substring(indexa2 + length2));
                arranger = extract(copy1, "capitals");
                copy1.delete(0, copy1.length());
            } else if (indexa3 < indexa1 && indexa3 < indexa2 && indexa3 < 1000 && indexa3 < indexa4) {
                int length3 = a3.length();
                copy1.append(fileContents.substring(indexa3 + length3));
                arranger = extract(copy1, "capitals");
                copy1.delete(0, copy1.length());
            } else if (indexa4 < indexa1 && indexa4 < indexa2 && indexa4 < 1000 && indexa4 < indexa3) {
                copy1.append(fileContents.substring(indexa4 - 35));
                arranger = extract(copy1, "capitals");
                copy1.delete(0, copy1.length());
            } else {
                arranger = "No data on arranger is available";
            }

            //finds agent
            String ag1 = "AGENT";
            String ag2 = "with";
            String ag3 = "Agent";
            String ag4 = "as Australian Agent";
            String ag5 = "as Administrative Agent";
            String agent = "";
            int indexag1 = fileContents.indexOf(ag1);
            int indexag2 = fileContents.indexOf(ag2);
            int indexag3 = fileContents.indexOf(ag3);
            int indexag4 = fileContents.indexOf(ag4);
            int indexag5 = fileContents.indexOf(ag5);
            if (indexag1 == -1) {
                indexag1 = 1001;
            }
            if (indexag2 == -1) {
                indexag2 = 1001;
            }
            if (indexag3 == -1) {
                indexag3 = 1001;
            }
            if (indexag4 == -1) {
                indexag4 = 1001;
            }
            if (indexag5 == -1) {
                indexag5 = 1001;
            }
            if (indexag1 < indexag2 && indexag1 < indexag3 && indexag1 < 1000 && indexag1 < indexag4 && indexag1 < indexag5) {
                int length1 = ag1.length();
                copy1.append(fileContents.substring(indexag1 + length1));
                agent = extract(copy1, "capitals");
                copy1.delete(0, copy1.length());
            } else if (indexag2 < indexag1 && indexag2 < indexag3 && indexag2 < 1000 && indexag2 < indexag4 && indexag2 < indexag5) {
                int length2 = ag2.length();
                copy1.append(fileContents.substring(indexag2 + length2));
                agent = extract(copy1, "capitals");
                copy1.delete(0, copy1.length());
            } else if (indexag3 < indexag1 && indexag3 < indexag2 && indexag3 < 1000 && indexag3 < indexag4 && indexag3 < indexag5) {
                int length3 = ag3.length();
                copy1.append(fileContents.substring(indexag3 + length3));
                agent = extract(copy1, "capitals");
                copy1.delete(0, copy1.length());
            } else if (indexag4 < indexag1 && indexag4 < indexag2 && indexag4 < 1000 && indexag4 < indexag3 && indexag4 < indexag5) {
                copy1.append(fileContents.substring(indexag4 - 35));
                agent = extract(copy1, "capitals");
                copy1.delete(0, copy1.length());
            } else if (indexag5 < indexag1 && indexag5 < indexag2 && indexag5 < 1000 && indexag5 < indexag3 && indexag5 < indexag4) {
                copy1.append(fileContents.substring(indexag5 - 30));
                agent = extract(copy1, "capitals");
                copy1.delete(0, copy1.length());
            } else {
                agent = "No data on agent is available";
            }

            //finds amount
            int mi = fileContents.indexOf("$");
            if (mi == -1) {
                mi = fileContents.indexOf("€");
            }
            int ss;
            String before = fileContents.substring(mi - 3, mi + 1);
            String bb = "";
            for (ss = 0; ss < before.length(); ss++) {
                char current = before.charAt(ss);
                if (Character.isUpperCase(current) || current == '$') {
                    bb += current;
                }
            }
            copy1.append(fileContents.substring(mi + 1));
            String amount = extract(copy1, "numbers");
            amount = bb + amount;
            copy1.delete(0, copy1.length());

            //finds date
            copy1.append(fileContents.substring(0, 1000));
            String date = extract(copy1, "date");
            copy1.delete(0, copy1.length());

            toc.append(fileContents.substring(0, 10000));


            //finds beginning of covenant
            boolean lowercase = false;
            String potentialRR = "INFORMATION UNDERTAKINGS";
            String abc = "COVENANTS";
            int indexOfAbc = fileContents.indexOf(abc);
            boolean rryes = false;
            int istherr = fileContents.indexOf(potentialRR);

            //checks to see if information undertakings is even a section 
            if (istherr != -1) {
                rryes = true;
                rr.append(fileContents.substring(istherr));
                fileContents.delete(0, istherr);
            } 
            //if its not, than we move onto affirmative or just plain ol covenants 
else {
                String check1 = "AFFIRMATIVE COVENANTS";
                int indexcheck1 = fileContents.indexOf(check1);
                int clength = check1.length();
                // if affirmative covenants exist
                if (indexcheck1 != -1) {
                    String checkfor2 = fileContents.substring(indexcheck1 + clength);
                    int indexcheck2 = checkfor2.indexOf(check1);
                    if (indexcheck2 != -1) {
                        fileContents.delete(0, indexcheck2 + indexcheck1 + clength);
                    } else {
                        String check2 = "Affirmative Covenants";
                        int ic2 = fileContents.indexOf(check2);
                        if (ic2 != -1) {
                            lowercase = true;
                            fileContents.delete(0, ic2);
                        } else {
                            fileContents.delete(0, indexcheck1);
                        }
                    }
                }
                // if only covenants exist
                else {
                    if (indexOfAbc < 3000) {
                        fileContents.delete(0, indexOfAbc + clength);
                        int secondtry = fileContents.indexOf(abc);
                        fileContents.delete(0, secondtry);
                    } else {
                        fileContents.delete(0, indexOfAbc);
                    }
                }
            }

            //finds end of covenant
            if (lowercase == false) {
                for (j = 0; j < fileContents.length(); j++) {
                    char current = fileContents.charAt(j);
                    if (Character.isUpperCase(current)) {
                        countCapitals++;
                    } else {
                        countCapitals = 0;
                    }
                    if (countCapitals == 2) {
                        String newbie = fileContents.substring(j - 1);
                        boolean result = ends(newbie);
                        if (!result) {
                            covenants.append(fileContents.substring(indexOfAbc, indexOfAbc + (j - 1)));
                            fileContents.delete(j - 1, fileContents.length() - 1);
                        }
                    }
                }
            } else {
                String end = goToEnd(toc, "NEGATIVE COVENANTS");
                int endspot = fileContents.indexOf(end);
                fileContents.delete(endspot, fileContents.length() - 1);
            }

            //create template
            String tt = templateTop(borrower, arranger, agent, amount, date);
            String tm = "";
            if (rryes) {
                tm = templateRR(fileContents);
            } else {
                tm = rrInCovenant(fileContents);
            }
            String tb = bottomTemplate(fileContents);
            String template = tt + tm + tb;
            template += "\n";
            template += "___________________________________________________________________________";
            template += "\n";
            template += "ENTIRETY OF COVENANTS:";
            template += "\n";
            template += "\n";
            fileContents.insert(0, template);


            myWriter.write(fileContents.toString());
            myWriter.close();
            System.out.println("Successfully wrote to the file.");
        } catch (
                IOException e) {
            System.out.println("An error occurred.");
            e.printStackTrace();
        }

    }
}

